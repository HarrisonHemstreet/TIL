
<?php

namespace Drupal\airline_bundler\Form;

use Drupal\Core\Batch\BatchBuilder;
use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Logger\LoggerChannelFactoryInterface;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\Core\Url;
use Drupal\taxonomy\TermInterface;

use Drupal\airline_bundler\Service\AirlineBundlerArchivesInterface;
use Drupal\json_generate\Services\JsonGenerateServiceInterface;

use Symfony\Component\DependencyInjection\ContainerInterface;

class AirlineBundlerForm extends FormBase {

  const LOGGER = 'airline_bundler.form.logger';

  /**
   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
   */
  protected $logger;

  /**
   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
   */
  protected $entityTypeManager;

  /**
   * @var \Drupal\Core\File\FileSystemInterface
   */
  protected $fileSystem;

  /**
   * @var \Drupal\Core\Config\ConfigFactoryInterface
   */
  protected $jsonGenerateConfig;

  /**
   * @var \Drupal\Core\Messenger\MessengerInterface
   */
  protected $messenger;

  /**
   * @var \Drupal\airline_bundler\Service\AirlineBundlerArchivesInterface
   */
  protected $airlineBundlerArchives;

  /**
   * Initialize the AirlineBundlerForm class
   *
   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
   *   The logger channel factory.
   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
   *   The entity type manager object.
   * @param \Drupal\Core\File\FileSystemInterface $file_system
   *   The file system object.
   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
   *   The config factory instance.
   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
   *   The messenger object.
   */
  public function __construct(LoggerChannelFactoryInterface $logger, EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system, ConfigFactoryInterface $config_factory, MessengerInterface $messenger, AirlineBundlerArchivesInterface $airline_bundler_archives) {
    $this->logger = $logger->get(static::LOGGER);
    $this->entityTypeManager = $entity_type_manager;
    $this->fileSystem = $file_system;
    $this->jsonGenerateConfig = $config_factory->get(JsonGenerateServiceInterface::CONFIG);
    $this->messenger = $messenger;
    $this->airlineBundlerArchives = $airline_bundler_archives;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('logger.factory'),
      $container->get('entity_type.manager'),
      $container->get('file_system'),
      $container->get('config.factory'),
      $container->get('messenger'),
      $container->get('airline_bundler.archives.service')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'airline_bundler_form';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    // get all airlines
    // upon select of an airline show the last pages that were generated
    $airline_options = $this->getAirlinesAsOptionValuees();

    if (count($airline_options) > 1) {
      $form['airline'] = [
        '#type' => 'select',
        '#title' => $this->t('Airline'),
        '#options' => $airline_options,
        '#default_value' => '',
        '#description' => $this->t('Select which airline to generate the app bundle.'),
        '#ajax' => [
          'event' => 'change',
          'callback' => [$this, 'getBundleArchives'],
          'wrapper' => 'archives-data',
        ],
      ];

      $form['location'] = [
        '#type' => 'textfield',
        '#title' => $this->t('Folder location'),
        '#description' => $this->t('The location where the bundle would be stored other than the root folder in the server. (e.g. /3rdparty/gde)'),
        '#default_value' => '/3rdparty/gde',
      ];

      $selected_airline = $form_state->getValue('airline');

      $form['dynamic_data'] = [
        '#type' => 'container',
        '#prefix' => '<div id="archives-data">',
        '#suffix' => '</div>',
      ];

      $form['dynamic_data']['home_page'] = [
        '#type' => 'select',
        '#title' => $this->t('Homepage'),
        '#description' => $this->t('Select the homepage for the airline.'),
        '#options' => $this->getAirlineNodesAsOptions($selected_airline),
        '#default_value' => '',
        '#required' => TRUE,
      ];

      $form['dynamic_data']['archives'] = [
        '#markup' => $this->showArchives($selected_airline),
      ];

      $submit['submit'] = [
        '#type' => 'submit',
        '#value' => $this->t('Generate App Bundle'),
        '#button_type' => 'primary',
      ];

      $form['actions'] = ['#type' => 'actions'] + $submit;
    }
    else {
      $form['info'] = [
        '#markup' => '<p>' . $this->t('No airlines available to create app bundles.') . '</p>',
      ];
    }

    return $form;

  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    $location = $form_state->getValue('location');
    if (!empty($location)) {
      if (preg_match('/:\/\//', $location)) {
        $form_state->setError($form['location'], $this->t('Please no http host/scheme in the location\'s folder.'));
      }
      elseif (preg_match('/\/\//', $location)) {
        $form_state->setError($form['location'], $this->t('Please no double forward-slashes.'));
      }

      // make sure there are no spaces in between
      $paths = explode("/", ltrim($location, '/'));
      foreach ($paths as $path) {
        if (preg_match('/\s+/', $path)) {
          $form_state->setError($form['location'], $this->t('Please enter paths without spaces.'));
          break;
        }
      }
    }
  }

  /**
   * ajax callback function for airline dropdown
   */
  public function getBundleArchives(array &$form, FormStateInterface $form_state) {
    return $form['dynamic_data'];
  }

  /**
   * function to select all pages for the selected airline
   *
   * @param int $tid
   *   The airline term id.
   *
   * @return array
   */
  protected function getAirlineNodesAsOptions($tid) {

    $options = ['' => $this->t('Select a page')];

    if (!empty($tid)) {
      $airline_nodes = $this->getAirlineNodes($tid);

      if ($airline_nodes) {
        foreach ($airline_nodes as $node) {
          $options[$node->id()] = $node->getTitle() . ' (' . $node->id() . ')';
        }
      }
    }

    return $options;
  }

  /**
   * function to select all pages for the selected airline
   *
   * @param int $tid
   *   The airline term id.
   *
   * @return array
   */
  protected function getAirlineNodes($tid) {
    $props = [
      'field_airline' => $tid,
      'field_include_in_app_bundle' => 1,
      'status' => 1,
    ];

    return $this->entityTypeManager->getStorage('node')->loadByProperties($props);
  }

  /**
   * function to show bundle archives in table format
   *
   * @param int $tid
   *   The airline term id.
   *
   * @return string $html
   */
  protected function showArchives($tid) {

    $content = '<tr><td colspan="4">Please select an airline.</td></tr>';

    if (!empty($tid)) {
      $archives = $this->airlineBundlerArchives->getAirlineBundleArchives(['airline_tid' => $tid]);
      if (empty($archives)) {
        $content = '<tr><td colspan="4">No bundle archives found.</td></tr>';
      }
      else {
        $content = '';
        foreach ($archives as $archive) {
          $content .= '<tr>';
          $content .=  '<td>' . $this->getBundleDate($archive->created) . '</td>';
          $content .=  "<td>$archive->airline</td>";
          $content .=  "<td>". $this->getAccountName($archive->uid) . "</td>";
          $content .=  "<td>" . $this->getDownloadLink($archive->bundle_link) . "</td>";
          $content .= '</tr>';
        }
      }
    }

    $html = '<br /><table><thead><th>Date</th><th>Airline</th><th>Generated by</th><th>Link</th></thead>';
    $html .= $content;
    $html .= '</table><br />';

    return $html;
  }

  /**
   * function to get the account name of a user
   *
   * @param int $uid
   *   The account user id.
   *
   * @return string $username
   */
  protected function getAccountName($uid) {
    $account = $this->entityTypeManager->getStorage('user')->load($uid);

    if ($account) {
      return $account->getDisplayName();
    }

    return $this->t('Anonymous');
  }

  /**
   * function to get the download link
   *
   * @param string $download_uri
   *   The download uri.
   *
   * @return string html link
   */
  protected function getDownloadLink($download_uri) {
    $download_url = Url::fromUri(file_create_url($download_uri));
    $link = Link::fromTextAndUrl(t('Download'), $download_url);
    if (!empty($link)) {
      return $link->toString();
    }

    return 'None';
  }

  /**
   * function to get the archive bundle date.
   *
   * @param int $timestamp
   *   The timestamp.
   * @param string $format
   *   The date format, defaults to 'd M Y'.
   *
   * @return string $date
   */
  protected function getBundleDate($timestamp, $format = 'd M Y h:i a') {
    $date = new \DateTime();

    if (!empty($timestamp)) {
      $date->setTimestamp($timestamp);
    }

    return $date->format($format);
  }

  /**
   * function to create the batch
   *
   * @param \Drupal\taxonomy\TermInterface $term
   *   The taxonomy object.
   * @param int $home_page
   *   The node id of the homepage for the airline.
   * @param string $location
   *   The root folder where the bundle will be stored.
   *
   * @return array
   */
  // here
  // prepareBundle is always the top function of the generate bundle button
  // tail the exploro_php container, I Can see all the outputs of the error_log
  protected function prepareBundle(TermInterface $term, $home_page, $location) {
    $airline_tid = $term->id();
    $airline = trim($term->getName());
    $airline_folder = $this->hyphenise($airline);

    $batch_builder = new BatchBuilder();
    $batch_builder->setTitle($this->t('Starting to create @airline bundle.', [
      '@airline' => $airline,
    ]));

    // create batch to
    // create airline folder on private://bundles/{airlinefolder}
    $batch_builder->addOperation('\Drupal\airline_bundler\Batch\AirlineBundlerBatch::createAirlineBundleFolder', [$airline_folder, $location, $term]);

    $location = '';
    
    // get all pages for the airline
    $airline_nodes = $this->getAirlineNodes($airline_tid);
    if (!empty($airline_nodes)) {
      // generate the json to te created airline folder
      foreach ($airline_nodes as $airline_node) {
        $batch_builder->addOperation('\Drupal\airline_bundler\Batch\AirlineBundlerBatch::generateNodeJson', [$airline_node, $airline, $home_page, $location]);
      }

      $batch_builder->addOperation('\Drupal\airline_bundler\Batch\AirlineBundlerBatch::generateFooterJson', [$airline, $location]);

      $batch_builder->addOperation('\Drupal\airline_bundler\Batch\AirlineBundlerBatch::generateAirlineJson', [$airline, $airline_folder, $location]);

      $batch_builder->addOperation('\Drupal\airline_bundler\Batch\AirlineBundlerBatch::transferFrontEndFiles', [$airline]);

      $batch_builder->addOperation('\Drupal\airline_bundler\Batch\AirlineBundlerBatch::copyCustomArchiveFiles', [$airline]);

      $airline_images_path = $this->airlineFolderExists($airline_folder);
      if ($airline_images_path) {
        // ensure to zip airline folder that exists
        $batch_builder->addOperation('\Drupal\airline_bundler\Batch\AirlineBundlerBatch::zipAirline', [$airline_images_path]);
      }
      $batch_builder->addOperation('\Drupal\airline_bundler\Batch\AirlineBundlerBatch::copySharedAssets', [$airline_folder]);
      $batch_builder->addOperation('\Drupal\airline_bundler\Batch\AirlineBundlerBatch::generateSearchMap', [$airline_folder]);

      // create the bundle
      $batch_builder->addOperation('\Drupal\airline_bundler\Batch\AirlineBundlerBatch::createBundle', [$airline_folder, $airline_tid]);
      $batch_builder->setFinishCallback('\Drupal\airline_bundler\Batch\AirlineBundlerBatch::finishAirlineBundler');
      $batch = $batch_builder->toArray();
      if (count($batch['operations'])) {
        return $batch;
      }
    }
    else {
      $this->messenger->addError($this->t('No pages available for @airline to create a bundle.', [
        '@airline' => $airline,
      ]));
    }

    return [];
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    // store the bundle info on a custom table
    // make sure an airline is selected
    $airline_tid = $form_state->getValue('airline');
    $airline_term = $this->entityTypeManager->getStorage('taxonomy_term')->load($airline_tid);
    $home_page = $form_state->getValue('home_page');

    $location = $form_state->getValue('location');
    if (!empty($location)) {
      $location = rtrim($location, '/');
    }

    if (!empty($airline_term)) {
      $batch = $this->prepareBundle($airline_term, $home_page, $location);
      if (!empty($batch)) {
        batch_set($batch);
      }
      else {
        $this->messenger->addError('An error occcured while creating the bundle.');
      }
    }
    else {
      $this->messenger->addError('No airline selected.');
    }
  }

  /**
   * function to get airlines as option values
   *
   * @return array
   */
  protected function getAirlinesAsOptionValuees() {
    $airlines = $this->entityTypeManager->getStorage('taxonomy_term')->loadTree('airline');
    $airline_options = ['' => $this->t('Select an airline')];
    foreach ($airlines as $airline) {
      $airline_options[$airline->tid] = $airline->name;
    }

    return $airline_options;
  }

  /**
   * function to hyphenise undescore, hyphen and spaces
   *
   * @param string $text
   *   the text to hyphenise
   * @return string
   */
  protected function hyphenise($text) {
    return preg_replace('/\s+/', '-', preg_replace('/[_-]/', ' ', $text));
  }

  /**
   * function to get the scheme.
   *
   * @return string
   */
  protected function getScheme() {
    $scheme = 'public://';

    $config_scheme = $this->jsonGenerateConfig->get('scheme');
    if (!empty($config_scheme)) {
      $scheme = $config_scheme;
    }

    return $scheme;
  }

  /**
   * function to check if folder exists
   *
   * @param string $airline_folder
   *  The folder name for the airline.
   *
   * @return boolean
   */
  protected function airlineFolderExists($airline_folder) {
    $scheme = $this->getScheme();
    $dir = $scheme . $airline_folder;

    if ($this->fileSystem->prepareDirectory($dir)) {
      return $dir;
    }

    return FALSE;
  }
}
