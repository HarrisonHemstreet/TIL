<?php

namespace Drupal\airline_bundler\Batch;

use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

class AirlineBundlerBatch {

  const ARCHIVE_FILES = '/\.(jpe?g|png|PNG|gif|ico|svg)|\.(eot|svg|ttf|woff|woff2|otf)|\.webmanifest|\.js|\.json|\.html$/';
  const BUNDLE_FILES = '/\.(jpe?g|png|PNG|gif|ico|svg)|\.(eot|svg|ttf|woff|woff2|otf)|\.webmanifest|\.js|\.json|\.html|\.zip|\.mp4$/';
  /**
   * function to create the private folder
   *
   * @param string $airline
   *   The airline name.
   * @param string $root_folder
   *   The folder prefix to all links.
   * @param array &$context
   *   The batch context information.
   */
  public static function createAirlineBundleFolder($airline, $root_folder, $term, array &$context) {
    if (!isset($context['results']['success'])) {
      $context['results']['success'] = [];
      $context['results']['warning'] = [];
      $context['results']['errors'] = [];
      $context['results']['airline_folder'] = '';
    }

    $context['message'] = t('Creating the @airline folder.', [
      '@airline' => $airline,
    ]);

    try {

      $file_system = \Drupal::service('file_system');

      $dir = 'private://bundles/' . $airline;
      $file_system->deleteRecursive($dir);
      $dir_writeable = FALSE;
      $exists = $file_system->prepareDirectory($dir, FileSystemInterface::CREATE_DIRECTORY);
      if ($exists) {
        $dir_writeable = $file_system->prepareDirectory($dir, FileSystemInterface::MODIFY_PERMISSIONS);
      }

      if ($dir_writeable) {
        $content = AirlineBundlerBatch::handleFlags($root_folder, $airline, $term);
        $file_uri = rtrim($dir, '/') . '/config.js';
        $file_handle = fopen($file_uri, "w");
        fwrite($file_handle, $content);
        fclose($file_handle);
        $context['results']['airline_folder'] = $dir;

      }
    }
    catch (\Exception $e) {
      $context['results']['errors'][] = $e->getMessage();
    }
  }

  public static function handleFlags($rootFolder, $airline, $term) {
    $content = "window.BASE_URL = '${rootFolder}'\nwindow.AIRLINE = '${airline}'";
    
    // show close button
    if($term->hasField('field_show_close_button')) {
      $showCloseButton = $term->get('field_show_close_button')->value;
      $content .= "\nwindow.SHOW_CLOSE_BUTTON = ${showCloseButton}";
    }
    else {
      $content .= "\nwindow.SHOW_CLOSE_BUTTON = false";
    }
    
    // show gamification
    if($term->hasField('field_show_gamification')) {
      $showGamification = $term->get('field_show_gamification')->value;
      $content .= "\nwindow.SHOW_GAMIFICATION = ${showGamification}";
    }
    else {
      $content .= "\nwindow.SHOW_GAMIFICATION = false";
    }
    
    // use get endpoint
    if($term->hasField('field_use_get_endpoint')) {
      $useGetEndpoint = $term->get('field_use_get_endpoint')->value;
      $content .= "\nwindow.USE_GET_ENDPOINT = ${useGetEndpoint}";
    }
    else {
      $content .= "\nwindow.USE_GET_ENDPOINT = false";
    }
    
    // bypass oauth
    if($term->hasField('field_bypass_oauth')) {
      $bypassOauth = $term->get('field_bypass_oauth')->value;
      $content .= "\nwindow.BYPASS_OAUTH = ${bypassOauth}";
    }
    else {
      $content .= "\nwindow.BYPASS_OAUTH = false";
    }
        // Hide Exploro Logo
    if($term->hasField('field_hide_exploro_logo')) {
      $hideExploroLogo = $term->get('field_hide_exploro_logo')->value;
      $content .= "\nwindow.HIDE_EXPLORO_LOGO = ${hideExploroLogo}";
    } else {
      $content .= "\nwindow.HIDE_EXPLORO_LOGO = false";
    }
    
    return $content;
  }

  /**
   * function to generate the json file for the airline bundles
   *
   * @param \Drupal\node\NodeInterface $node
   *   The node object.
   * @param string $airline_folder_path
   *   The airline name.
   * @param int $home_page
   *   The home page node id for the airline.
   * @param array &$context
   *   The batch context information.
   * @param string $root_folder
   *   The folder prefix to all links.
   */
  public static function generateNodeJson(NodeInterface $node, $airline, $home_page, $root_folder, array &$context) {
    if (!isset($context['results']['success'])) {
      $context['results']['success'] = [];
      $context['results']['warning'] = [];
      $context['results']['errors'] = [];
      $context['results']['airline_folder'] = '';
    }

    if (!empty($context['results']['airline_folder'])) {

      $airline_folder = rtrim($context['results']['airline_folder'], '/') . '/data/json';

      $context['message'] = t('Generating json file for @title...', [
        '@title' => $node->getTitle(),
      ]);

      if (!\Drupal::service('json_generate.service')->generateJson($node, $airline_folder, TRUE, $home_page, $root_folder)) {
        $context['errors'][] = t('Failed to generate json for @title', [
          '@title' => $node->getTitle(),
        ]);
      }
    }
    else {
      $context['results']['errors'][] = t('Cannot proceedd to generate json bundles. @airline folder is not generated.', [
        '@airline' => $airline,
      ]);
    }
  }

  /**
   * function to generate the footer json file for the airline bundles
   *
   * @param string $airline_folder_path
   *   The airline name.
   * @param string $root_folder
   *   The folder prefix to all links.
   *
   * @param array &$context
   *   The batch context information.
   */
  public static function generateFooterJson($airline, $root_folder, &$context) {
    if (!isset($context['results']['success'])) {
      $context['results']['success'] = [];
      $context['results']['warning'] = [];
      $context['results']['errors'] = [];
      $context['results']['airline_folder'] = '';
    }

    if (!empty($context['results']['airline_folder'])) {

      $airline_folder = rtrim($context['results']['airline_folder'], '/') . '/data/json/menu';

      $context['message'] = t('Generating footer json file...');

      if (!\Drupal::service('json_generate.menu.service')->generateJson('footer', $airline_folder, TRUE, $root_folder)) {
        $context['errors'][] = t('Failed to generate footer json file.');
      }
    }
    else {
      $context['results']['errors'][] = t('Cannot proceedd to generate json bundles. @airline folder is not generated.', [
        '@airline' => $airline,
      ]);
    }
  }

  /**
   * function to generate the footer json file for the airline bundles
   *
   * @param string $airline_folder_path
   *   The airline name.
   * @param string $airline_menu_id
   *   The airline menu id.
   * @param string $root_folder
   *   The folder prefix to all links.
   *
   * @param array &$context
   *   The batch context information.
   */
  public static function generateAirlineJson($airline, $airline_menu_id, $root_folder, &$context) {
    if (!isset($context['results']['success'])) {
      $context['results']['success'] = [];
      $context['results']['warning'] = [];
      $context['results']['errors'] = [];
      $context['results']['airline_folder'] = '';
    }

    if (!empty($context['results']['airline_folder'])) {

      $airline_folder = rtrim($context['results']['airline_folder'], '/') . '/data/json/menu';

      $context['message'] = t('Generating footer json file...');

      $airline_menu_id = trim(strtolower($airline_menu_id));
      if (!\Drupal::service('json_generate.menu.service')->generateJson($airline_menu_id, $airline_folder, TRUE, $root_folder)) {
        $context['errors'][] = t('Failed to generate airline json file.');
      }
    }
    else {
      $context['results']['errors'][] = t('Cannot proceedd to generate json bundles. @airline menu is not generated.', [
        '@airline' => $airline,
      ]);
    }
  }

  /**
   * function to create a zip file of the airline folder.
   *
   * @param string $airline_images_path
   *   The airline folder name.
   * @param array &$context
   *   The batch context information.
   */
  public static function zipAirline($airline_images_path, &$context) {
    if (!isset($context['results']['zip'])) {
      $context['results']['zip'] = '';
    }

    if (!empty($context['results']['airline_folder'])) {
      $airline_target_folder = rtrim($context['results']['airline_folder'], '/');
      $paths = explode("/", $airline_target_folder);
      $airline = array_pop($paths);

      $context['message'] = t('Zipping the @airline images', [
        '@airline' => $airline,
      ]);

      $file_system = \Drupal::service('file_system');
      $files_pattern = '/\.jpg|\.jpeg|\.png|\.PNG|\.webp|\.jp2/';
      $files = $file_system->scanDirectory($airline_images_path, $files_pattern);

      if ($files) {
        foreach ($files as $file) {
          $target_path = AirlineBundlerBatch::prepareAirlineImagesFolder($file->uri, $airline_target_folder);
          if ($target_path) {
            \Drupal::service('file_system')->copy($file->uri, $target_path);
          }
        }
      }
    }
  }

  /**
   * Copies assets linked in bundle from approved shared airline.
   * @param array &$context
   *   The batch context information.
  */
  public static function copySharedAssets($airline_folder, &$context) {
    $airline_target_folder = rtrim($context['results']['airline_folder'], '/');
  
    $file_system = \Drupal::service('file_system');
    $files_pattern = '/\.json/';
    $files = $file_system->scanDirectory("private://bundles/$airline_folder/data/json", $files_pattern);
    
    if ($files) {
      $orphaned = [];
      foreach ($files as $file) {
        $string = file_get_contents($file->uri);
        $json_a = json_decode($string, true);
        AirlineBundlerBatch::traverseJson($json_a, $airline_folder, $orphaned);
      }

      if(count($orphaned)) {
        $filtered = array_filter($orphaned, function ($str) use ($airline_folder) {
          return strpos($str, $airline_folder) === false;
        });

        foreach ($filtered as $orphan) {
          $exploded = explode("/", $orphan);
          $urlDecoded = array_map(function($str) {
            return urldecode($str);
          }, $exploded);
          $key = array_search('files', $urlDecoded);
          $joined = join('/', array_slice($urlDecoded, $key + 1));
          $target_path = AirlineBundlerBatch::prepareAirlineImagesFolder("public://$joined", $airline_target_folder);
          if(file_exists("public://$joined") && $target_path) {
            \Drupal::service('file_system')->copy("public://$joined", $target_path);
          }
          else {
            $context['message'] = t('Unable to copy image @imageurl', [
              '@imageurl' => "public://$joined",
            ]);
          }
        }
      }
    }
    // Ends run shared assets section
  }

  public static function traverseJson($json, $airline, &$uniqueKeys) {
    $isArr = is_array($json);
    if($isArr) {
      $keys = array_keys($json);
      array_map(function ($key) use ($json, $airline, &$uniqueKeys) { AirlineBundlerBatch::traverseJson($json[$key], $airline, $uniqueKeys); }, $keys);
    }
    else {
      AirlineBundlerBatch::validateIsImageLink([ $json ], $airline, $uniqueKeys);
    }
  }

  public static function validateIsImageLink($strsToSearch, $airline, &$orphaned) {
    foreach ($strsToSearch as $strToSearch) {
      if( str_contains($strToSearch, 'images') && !str_contains($strToSearch, $airline)) {
        $orphaned[] = $strToSearch;
      }
    }
  }

  /**
   * function to copy over the frontend files
   *
   * @param string $airline_folder_name
   *   The airline folder name.
   * @param array &$context
   *   The batch context information.
   */
  public static function transferFrontEndFiles($airline_folder_name, &$context) {
    if (!empty($context['results']['airline_folder'])) {

      $file_system = \Drupal::service('file_system');
      $files = $file_system->scanDirectory('private://Archive', AirlineBundlerBatch::ARCHIVE_FILES);

      if ($files) {
        $airline_target_folder = rtrim($context['results']['airline_folder'], '/') . '/';

        foreach ($files as $file) {

          $context['message'] = t('Copying frontend file: @file to the @airline.', [
            '@file' => $file->filename,
            '@airline' => $airline_folder_name,
          ]);

          $entry_path = AirlineBundlerBatch::getEntryPaths($file->uri);
          array_shift($entry_path);

          $filename = array_pop($entry_path);
          $dir = $airline_target_folder . implode("/", $entry_path);

          $dir_writeable = FALSE;

          $exists = $file_system->prepareDirectory($dir, FileSystemInterface::CREATE_DIRECTORY);
          if ($exists) {
            $dir_writeable = $file_system->prepareDirectory($dir, FileSystemInterface::MODIFY_PERMISSIONS);
          }

          if ($dir_writeable) {
            $entry_path = rtrim($dir, '/') . '/' . $filename;
            $file_system->copy($file->uri, $entry_path, FileSystemInterface::EXISTS_REPLACE);
          }
        }

        // move index.html
      }
    }
  }

  public static function copyCustomArchiveFiles($airline_folder_name, &$context) {
    $file_system = \Drupal::service('file_system');
    $lowered = strtolower($airline_folder_name);
    $folderExists = file_exists("private://airline_config/${lowered}");
    if($folderExists) {
      $files = $file_system->scanDirectory("private://airline_config/${lowered}", AirlineBundlerBatch::ARCHIVE_FILES);
      $airline_target_folder = rtrim($context['results']['airline_folder'], '/') . '/';
      foreach ($files as $file) {
        $entry_path = AirlineBundlerBatch::getEntryPaths($file->uri);
        array_shift($entry_path);

        $filename = array_pop($entry_path);
        $dir = $airline_target_folder . implode("/", array_slice($entry_path, 1));

        $dir_writeable = FALSE;

        $exists = $file_system->prepareDirectory($dir, FileSystemInterface::CREATE_DIRECTORY);
        if ($exists) {
          $dir_writeable = $file_system->prepareDirectory($dir, FileSystemInterface::MODIFY_PERMISSIONS);
        }

        if ($dir_writeable) {
          $entry_path = rtrim($dir, '/') . '/' . $filename;
          $file_system->copy($file->uri, $entry_path, FileSystemInterface::EXISTS_REPLACE);
        }
      }
    }
  }

  /**
   * function to create the bundle
   *
   * @param string $airline_folder_name
   *   The airline folder name.
   * @param int $airline_tid
   *   The term id.
   */
  public static function generateSearchMap($airline_folder, &$context) {
    $airline_target_folder = rtrim($context['results']['airline_folder'], '/');
    
    $file_system = \Drupal::service('file_system');
    $files_pattern = '/\.json/';
    $files = $file_system->scanDirectory("private://bundles/$airline_folder/data/json", $files_pattern, ["recurse" => false]);
    $filteredFiles = array_filter($files, function($fileRef) {
      $fileName = $fileRef->filename;
      if(
        $fileName === "destinationsOfTheDay.json" ||
        $fileName === "home.json" ||
        str_starts_with($fileName, "attractions-") ||
        str_starts_with($fileName, "about-") ||
        str_starts_with($fileName, "hotels-") ||
        str_starts_with($fileName, "restaurants-")
      ) {
        return false;
      }
      
      return true;
    });

    if($filteredFiles) {
      $searchMap = [];
      foreach ($filteredFiles as $file) {
        $string = file_get_contents($file->uri);
        $json_a = json_decode($string, true);
        $pushJson = [
          "url" => $json_a["url"],
          "id" => "search-map-" . $json_a["nid"],
          "title" => $json_a["name"],
          "text" => $json_a["name"],
          "imgSrc" => []
        ];
        $searchMap[] = $pushJson;
      }

      $file_uri = rtrim("private://bundles/$airline_folder/data/json/searchMap.json");
      $file_handle = fopen($file_uri, "w");
      fwrite($file_handle, json_encode($searchMap));
      fclose($file_handle);
    }
  }

  /**
   * function to create the bundle
   *
   * @param string $airline_folder_name
   *   The airline folder name.
   * @param int $airline_tid
   *   The term id.
   */
  public static function createBundle($airline_folder_name, $airline_tid, &$context) {
    if (!isset($context['results']['bundle'])) {
      $context['results']['bundle'] = '';
      $context['results']['airline_folder_name'] = '';
    }

    if (!empty($airline_folder_name)) {
      $context['results']['airline_folder_name'] = $airline_folder_name;
      $context['message'] = t('Creating the bundle: @airline', [
        '@airline' => $airline_folder_name,
      ]);

      $bundles_path = 'private://bundles/';

      $file_system = \Drupal::service('file_system');
      $dir = $bundles_path . $airline_folder_name;
      $files = $file_system->scanDirectory($dir, AirlineBundlerBatch::BUNDLE_FILES);

      if ($files) {

        $request_time = \Drupal::service('datetime.time')->getRequestTime();

        $date = new \DateTime();
        $date->setTimestamp($request_time);

        $zip_name = $airline_folder_name . '-' . $date->format('y-m-d-His') . '.zip';
        $zip_path = $bundles_path . $zip_name;
        $context['results']['bundle'] = $zip_path = $file_system->createFilename($zip_name, $bundles_path);

        $zip_realpath = $file_system->realPath($zip_path);
        $zip = new \ZipArchive();
        $zip->open($zip_realpath, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

        foreach ($files as $file) {

          $context['message'] = t('Creating the bundle: @airline - @filename', [
            '@airline' => $airline_folder_name,
            '@filename' => $file->filename,
          ]);

          $entry_path = AirlineBundlerBatch::getEntryPaths($file->uri);
          array_shift($entry_path);
          $entry_path = implode("/", $entry_path);
          $file_real_path = $file_system->realPath($file->uri);
          $zip->addFile($file_real_path, $entry_path);
        }

        $zip->close();

        $file_system->deleteRecursive($dir);
        // insert new archive
        $data = [
          'airline_tid' => $airline_tid,
          'airline' => $airline_folder_name,
          'bundle_link' => $zip_path,
          'created' => $request_time,
          'uid' => \Drupal::currentUser()->id(),
        ];

        \Drupal::service('airline_bundler.archives.service')->insertAirlineBundlerArchive($data);
      }
    }
  }

  /**
   * Batch API finish callback
   *
   * @param boolean $success
   *   A flag to indicate batch processing was successful.
   * @param $results
   *   An array of the values set in $context['results'] during batch process.
   * @param $operations
   *   If $success is FALSE, contains the operations that remained unprocessed.
   *   
   */
  public static function finishAirlineBundler($success, $results, $operations) {
    if ($success) {
      if (!empty($results['bundle'])) {
        $airline_path_uri = $results['bundle'];
        $airline_folder_name = $results['airline_folder_name'];
        $airline_url = Url::fromUri(file_create_url($airline_path_uri));
        $link = Link::fromTextAndUrl(t('Download @airline bundle.', ['@airline' => $airline_folder_name]), $airline_url);
        \Drupal::messenger()->addMessage($link->toString());
      }
    }
    else {

      $operation = reset($operations);

      if (empty($operation[0])) {
        \Drupal::messenger()->addError(t('Completed import but with errors.'));
      }
      else {
        \Drupal::messenger()->addError(t('An error occured while processing @operation with args: @args', [
          '@operation' => $operation[0],
          '@args' => print_r($operation[1], TRUE),
        ]));
      }
    }
  }

  /**
   * function to get the entry paths
   *
   * @param string $file_uri
   *   The file uri.
   *
   * @return array
   */
  protected static function getEntryPaths($file_uri) {
    $entry_path = explode("//", $file_uri);
    $entry_path = $entry_path[1];
    $entry_path = explode("/", $entry_path);

    return $entry_path;
  }

  /**
   * function to prepare and create dir
   *
   * @param string $file_uri
   *  The file uri.
   *
   * @return $string
   */
  protected static function prepareAirlineImagesFolder($file_uri, $airline_target_folder) {
    $file_path = file_create_url($file_uri);
    $relative_path = file_url_transform_relative($file_path);
    $paths = explode("/", $relative_path);
    array_pop($paths);
    $target_path = $airline_target_folder . implode("/", $paths);
    $dir_writeable = FALSE;
    $exists = \Drupal::service('file_system')->prepareDirectory($target_path, FileSystemInterface::CREATE_DIRECTORY);
    if ($exists) {
      $dir_writeable = \Drupal::service('file_system')->prepareDirectory($target_path, FileSystemInterface::MODIFY_PERMISSIONS);
    }

    if ($dir_writeable) {
      return $target_path;
    }

    return FALSE;
  }
}
